{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}{\f2\fnil\fcharset1 Segoe UI Symbol;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 Introduction\par
Let\rquote s Encrypt is a Certificate Authority (CA) that provides an easy way to obtain and install free TLS/SSL certificates, thereby enabling encrypted HTTPS on web servers. It simplifies the process by providing a software client, Certbot, that attempts to automate most (if not all) of the required steps. Currently, the entire process of obtaining and installing a certificate is fully automated on both Apache and Nginx.\par
\par
In this tutorial, you will use Certbot to obtain a free SSL certificate for Nginx on Ubuntu 20.04 and set up your certificate to renew automatically.\par
\par
This tutorial will use a separate Nginx server configuration file instead of the default file. We recommend creating new Nginx server block files for each domain because it helps to avoid common mistakes and maintains the default files as a fallback configuration.\par
\par
Prerequisites\par
To follow this tutorial, you will need:\par
\par
One Ubuntu 20.04 server set up by following this initial server setup for Ubuntu 20.04 tutorial, including a sudo-enabled non-root user and a firewall.\par
A registered domain name. This tutorial will use example.com throughout. You can purchase a domain name from Namecheap, get one for free with Freenom, or use the domain registrar of your choice.\par
Both of the following DNS records set up for your server. If you are using DigitalOcean, please see our DNS documentation for details on how to add them.\par
\par
An A record with example.com pointing to your server\rquote s public IP address.\par
An A record with {{\field{\*\fldinst{HYPERLINK www.example.com }}{\fldrslt{www.example.com\ul0\cf0}}}}\f0\fs22  pointing to your server\rquote s public IP address.\par
Nginx installed by following How To Install Nginx on Ubuntu 20.04. Be sure that you have a server block for your domain. This tutorial will use /etc/nginx/sites-available/example.com as an example.\par
Step 1 \f1\emdash  Installing Certbot\par
The first step to using Let\rquote s Encrypt to obtain an SSL certificate is to install the Certbot software on your server.\par
\par
Install Certbot and it\rquote s Nginx plugin with apt:\par
\par
sudo apt install certbot python3-certbot-nginx\par
Certbot is now ready to use, but in order for it to automatically configure SSL for Nginx, we need to verify some of Nginx\rquote s configuration.\par
\par
Step 2 \emdash  Confirming Nginx\rquote s Configuration\par
Certbot needs to be able to find the correct server block in your Nginx configuration for it to be able to automatically configure SSL. Specifically, it does this by looking for a server_name directive that matches the domain you request a certificate for.\par
\par
If you followed the server block set up step in the Nginx installation tutorial, you should have a server block for your domain at /etc/nginx/sites-available/example.com with the server_name directive already set appropriately.\par
\par
To check, open the configuration file for your domain using nano or your favorite text editor:\par
\par
sudo nano /etc/nginx/sites-available/example.com\par
Find the existing server_name line. It should look like this:\par
\par
/etc/nginx/sites-available/example.com\par
...\par
server_name example.com {{\field{\*\fldinst{HYPERLINK www.example.com }}{\fldrslt{www.example.com\ul0\cf0}}}}\f1\fs22 ;\par
...\par
If it does, exit your editor and move on to the next step.\par
\par
If it doesn\rquote t, update it to match. Then save the file, quit your editor, and verify the syntax of your configuration edits:\par
\par
sudo nginx -t\par
If you get an error, reopen the server block file and check for any typos or missing characters. Once your configuration file\rquote s syntax is correct, reload Nginx to load the new configuration:\par
\par
sudo systemctl reload nginx\par
Certbot can now find the correct server block and update it automatically.\par
\par
Next, let\rquote s update the firewall to allow HTTPS traffic.\par
\par
Step 3 \emdash  Allowing HTTPS Through the Firewall\par
If you have the ufw firewall enabled, as recommended by the prerequisite guides, you\rquote ll need to adjust the settings to allow for HTTPS traffic. Luckily, Nginx registers a few profiles with ufw upon installation.\par
\par
You can see the current setting by typing:\par
\par
sudo ufw status\par
It will probably look like this, meaning that only HTTP traffic is allowed to the web server:\par
\par
Output\par
Status: active\par
\par
To                         Action      From\par
--                         ------      ----\par
OpenSSH                    ALLOW       Anywhere                  \par
Nginx HTTP                 ALLOW       Anywhere                  \par
OpenSSH (v6)               ALLOW       Anywhere (v6)             \par
Nginx HTTP (v6)            ALLOW       Anywhere (v6)\par
To additionally let in HTTPS traffic, allow the Nginx Full profile and delete the redundant Nginx HTTP profile allowance:\par
\par
sudo ufw allow 'Nginx Full'\par
sudo ufw delete allow 'Nginx HTTP'\par
Your status should now look like this:\par
\par
sudo ufw status\par
Output\par
Status: active\par
\par
To                         Action      From\par
--                         ------      ----\par
OpenSSH                    ALLOW       Anywhere\par
Nginx Full                 ALLOW       Anywhere\par
OpenSSH (v6)               ALLOW       Anywhere (v6)\par
Nginx Full (v6)            ALLOW       Anywhere (v6)\par
Next, let\rquote s run Certbot and fetch our certificates.\par
\par
Step 4 \emdash  Obtaining an SSL Certificate\par
Certbot provides a variety of ways to obtain SSL certificates through plugins. The Nginx plugin will take care of reconfiguring Nginx and reloading the config whenever necessary. To use this plugin, type the following:\par
\par
sudo certbot --nginx -d example.com -d {{\field{\*\fldinst{HYPERLINK www.example.com }}{\fldrslt{www.example.com\ul0\cf0}}}}\f1\fs22\par
This runs certbot with the --nginx plugin, using -d to specify the domain names we\rquote d like the certificate to be valid for.\par
\par
If this is your first time running certbot, you will be prompted to enter an email address and agree to the terms of service. After doing so, certbot will communicate with the Let\rquote s Encrypt server, then run a challenge to verify that you control the domain you\rquote re requesting a certificate for.\par
\par
If that\rquote s successful, certbot will ask how you\rquote d like to configure your HTTPS settings.\par
\par
Output\par
Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.\par
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\par
1: No redirect - Make no further changes to the webserver configuration.\par
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for\par
new sites, or if you're confident your site works on HTTPS. You can undo this\par
change by editing your web server's configuration.\par
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\par
Select the appropriate number [1-2] then [enter] (press 'c' to cancel):\par
Select your choice then hit ENTER. The configuration will be updated, and Nginx will reload to pick up the new settings. certbot will wrap up with a message telling you the process was successful and where your certificates are stored:\par
\par
Output\par
IMPORTANT NOTES:\par
 - Congratulations! Your certificate and chain have been saved at:\par
   /etc/letsencrypt/live/example.com/fullchain.pem\par
   Your key file has been saved at:\par
   /etc/letsencrypt/live/example.com/privkey.pem\par
   Your cert will expire on 2020-08-18. To obtain a new or tweaked\par
   version of this certificate in the future, simply run certbot again\par
   with the "certonly" option. To non-interactively renew *all* of\par
   your certificates, run "certbot renew"\par
 - If you like Certbot, please consider supporting our work by:\par
\par
   Donating to ISRG / Let's Encrypt:   {{\field{\*\fldinst{HYPERLINK https://letsencrypt.org/donate }}{\fldrslt{https://letsencrypt.org/donate\ul0\cf0}}}}\f1\fs22\par
   Donating to EFF:                    {{\field{\*\fldinst{HYPERLINK https://eff.org/donate-le }}{\fldrslt{https://eff.org/donate-le\ul0\cf0}}}}\f1\fs22\par
Your certificates are downloaded, installed, and loaded. Try reloading your website using https:// and notice your browser\rquote s security indicator. It should indicate that the site is properly secured, usually with a lock icon. If you test your server using the SSL Labs Server Test, it will get an A grade.\par
\par
Let\rquote s finish by testing the renewal process.\par
\par
Step 5 \emdash  Verifying Certbot Auto-Renewal\par
Let\rquote s Encrypt\rquote s certificates are only valid for ninety days. This is to encourage users to automate their certificate renewal process. The certbot package we installed takes care of this for us by adding a systemd timer that will run twice a day and automatically renew any certificate that\rquote s within thirty days of expiration.\par
\par
You can query the status of the timer with systemctl:\par
\par
sudo systemctl status certbot.timer\par
Output\par
\f2\u9679?\f0  certbot.timer - Run certbot twice daily\par
     Loaded: loaded (/lib/systemd/system/certbot.timer; enabled; vendor preset: enabled)\par
     Active: active (waiting) since Mon 2020-05-04 20:04:36 UTC; 2 weeks 1 days ago\par
    Trigger: Thu 2020-05-21 05:22:32 UTC; 9h left\par
   Triggers: \f2\u9679?\f0  certbot.service\par
To test the renewal process, you can do a dry run with certbot:\par
\par
sudo certbot renew --dry-run\par
If you see no errors, you\rquote re all set. When necessary, Certbot will renew your certificates and reload Nginx to pick up the changes. If the automated renewal process ever fails, Let\rquote s Encrypt will send a message to the email you specified, warning you when your certificate is about to expire.\par
\par
Conclusion\par
In this tutorial, you installed the Let\rquote s Encrypt client certbot, downloaded SSL certificates for your domain, configured Nginx to use these certificates, and set up automatic certificate renewal. If you have further questions about using Certbot, the official documentation is a good place to start.\par
}
 